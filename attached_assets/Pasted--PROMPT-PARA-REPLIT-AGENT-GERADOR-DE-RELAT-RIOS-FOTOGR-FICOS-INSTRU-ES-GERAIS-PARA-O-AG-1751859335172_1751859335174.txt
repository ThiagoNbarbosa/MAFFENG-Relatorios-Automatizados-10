# PROMPT PARA REPLIT AGENT - GERADOR DE RELATÓRIOS FOTOGRÁFICOS

## 🎯 INSTRUÇÕES GERAIS PARA O AGENTE

**IMPORTANTE**: Este usuário é LOW CODE/NO CODE. Explique cada passo, seja detalhado nas instruções e crie código bem comentado e documentado.

## 📋 MISSÃO PRINCIPAL

Crie um aplicativo web Flask completo para automatizar a geração de relatórios fotográficos profissionais da empresa MAFFENG. O sistema deve permitir upload de arquivos ZIP com fotos organizadas em pastas e gerar documentos Word estruturados.

## 🏗️ ESTRUTURA DO PROJETO

Crie esta estrutura de pastas exatamente assim:

```
gerador-relatorios/
├── app.py                 # Servidor Flask principal
├── word_utils.py          # Funções para manipular Word
├── requirements.txt       # Dependências do projeto
├── templates/
│   ├── base.html         # Template base
│   ├── index.html        # Página principal
│   └── success.html      # Página de sucesso
├── static/
│   ├── css/
│   │   └── style.css     # Estilos customizados
│   ├── js/
│   │   └── main.js       # JavaScript
│   └── images/
│       └── logo.png      # Logo da empresa
├── uploads/              # Pasta para arquivos temporários
├── models/               # Templates Word
│   └── modelo_base.docx  # Template base
└── output/               # Relatórios gerados
```

## 🔧 FUNCIONALIDADES OBRIGATÓRIAS

### 1. INTERFACE WEB (templates/index.html)
Crie um formulário dividido em 4 seções com estes campos EXATOS:

**Seção 1: Informações do Projeto**
- Nome do Projeto (text input)
- Número do Contrato (text input)
- Ordem de Serviço (text input)
- Data de Elaboração (date input)

**Seção 2: Informações da Dependência**
- Prefixo da Agência (text input)
- Nome da Dependência (text input)
- Endereço Completo (textarea)
- UF (select com todos os estados)
- Tipo de Atendimento (select: "Preventivo", "Corretivo", "Emergencial")

**Seção 3: Responsáveis**
- Responsável da Dependência (text input)
- Responsável Técnico (text input)

**Seção 4: Arquivos**
- Seleção de Modelo (select com opções dos modelos disponíveis)
- Upload de ZIP (file input que aceita apenas .zip)

### 2. DESIGN OBRIGATÓRIO
- Use Tailwind CSS (inclua via CDN)
- Tema escuro com gradiente
- Elementos glassmorphism (transparência)
- Responsivo para mobile
- Animações suaves
- Feedback visual durante upload

### 3. PROCESSAMENTO DE ARQUIVOS (word_utils.py)
Implemente estas funções OBRIGATÓRIAS:

```python
def processar_zip(zip_path, dados_formulario):
    """
    Descompacta ZIP e organiza estrutura de pastas
    Retorna lista de conteúdo estruturado
    """
    
def inserir_conteudo_word(modelo_path, conteudo, placeholders, output_path):
    """
    Substitui placeholders no Word e insere imagens
    Retorna número de imagens inseridas
    """
    
def substituir_placeholders(doc, dados):
    """
    Substitui os 13 placeholders mapeados no documento
    """
```

### 4. PLACEHOLDERS OBRIGATÓRIOS
Substitua EXATAMENTE estes placeholders no documento Word:

```python
PLACEHOLDERS = {
    '{{prefixo_sb}}': 'prefixo_agencia',
    '{{nome_dependencia}}': 'nome_dependencia', 
    '{{uf}}': 'uf',
    '{{numero_contrato}}': 'numero_contrato',
    '{{ordem_servico}}': 'ordem_servico',
    '{{data_elaboracao}}': 'data_elaboracao',
    '{{tipo_atendimento}}': 'tipo_atendimento',
    '{{data_atendimento}}': 'data_elaboracao',  # Mesmo que elaboração
    '{{endereco_dependencia}}': 'endereco_completo',
    '{{responsavel_dependencia}}': 'responsavel_dependencia',
    '{{responsavel_tecnico}}': 'responsavel_tecnico',
    '{{elaborado_por}}': 'Ygor Augusto Fernandes',  # FIXO
    '{{empresa}}': 'MAFFENG - Engenharia e Manutenção Profissional'  # FIXO
}
```

### 5. ORDEM DE PASTAS OBRIGATÓRIA
As pastas devem ser processadas nesta ordem EXATA:

```python
ORDEM_PASTAS = [
    "- Área externa", 
    "- Área interna", 
    "- Segundo piso",
    "- Detalhes",
    "- Vista ampla"
]
```

### 6. ROTAS FLASK OBRIGATÓRIAS

```python
@app.route('/')
def index():
    # Página principal com formulário

@app.route('/upload', methods=['POST'])
def processar_upload():
    # Processa formulário e ZIP
    # Gera relatório Word
    # Retorna arquivo para download

@app.route('/download/<filename>')
def download_file(filename):
    # Download do relatório gerado
```

## 🎨 INSTRUÇÕES DE DESIGN

### CSS (static/css/style.css)
- Gradient escuro de fundo
- Cards com glassmorphism
- Animações hover
- Inputs estilizados
- Botões com efeitos

### JavaScript (static/js/main.js)
- Validação de formulário
- Feedback visual de upload
- Barra de progresso
- Notificações de sucesso/erro

## 📦 DEPENDÊNCIAS OBRIGATÓRIAS (requirements.txt)

```
Flask==2.3.3
python-docx==0.8.11
Pillow==10.0.1
Werkzeug==2.3.7
```

## 🔍 PROCESSAMENTO DE IMAGENS

### Regras OBRIGATÓRIAS:
1. Aceitar apenas PNG, JPG, JPEG
2. Redimensionar proporcionalmente (altura fixa 10cm)
3. Centralizar imagens no documento
4. Ordenar por data de criação
5. Inserir quebras de página entre seções

### Hierarquia de Títulos:
- Nível 0: Heading 1 (pastas principais)
- Nível 1: Heading 2 (subpastas)
- Nível 2: Heading 3 (sub-subpastas)
- Pastas especiais ("Detalhes", "Vista ampla"): Texto normal em negrito

## 🚨 TRATAMENTO DE ERROS OBRIGATÓRIO

Implemente tratamento para:
- ZIP corrompido ou inválido
- Imagens corrompidas
- Campos obrigatórios não preenchidos
- Erro na geração do Word
- Arquivo muito grande

## 🎯 FLUXO DE FUNCIONAMENTO

1. **Usuário acessa a página** → Mostra formulário
2. **Preenche dados** → Valida em tempo real
3. **Seleciona modelo** → Carrega opções disponíveis
4. **Faz upload do ZIP** → Mostra progresso
5. **Clica em "Gerar Relatório"** → Processa em background
6. **Sistema processa** → Feedback visual
7. **Relatório pronto** → Download automático

## 🎪 INSTRUÇÕES ESPECÍFICAS PARA O AGENTE

### PASSO 1: CONFIGURAÇÃO INICIAL
- Crie a estrutura de pastas completa
- Configure o arquivo requirements.txt
- Instale as dependências
- Teste se o Flask roda sem erros

### PASSO 2: CRIAR TEMPLATES HTML
- Comece com base.html (template base)
- Crie index.html com formulário completo
- Adicione Tailwind CSS via CDN
- Teste responsividade

### PASSO 3: IMPLEMENTAR BACKEND
- Crie app.py com rotas básicas
- Implemente word_utils.py
- Teste upload de arquivos
- Valide processamento de ZIP

### PASSO 4: INTEGRAÇÃO
- Conecte frontend com backend
- Adicione validações JavaScript
- Implemente feedback visual
- Teste fluxo completo

### PASSO 5: FINALIZAÇÃO
- Adicione tratamento de erros
- Otimize performance
- Documente código
- Crie arquivo README

## 🎨 EXEMPLO DE TEMPLATE WORD

O template deve conter:
- Cabeçalho com logo MAFFENG
- Todos os 13 placeholders
- Marca `{{start_here}}` onde inserir conteúdo
- Formatação profissional
- Rodapé com dados da empresa

## 🔧 CONFIGURAÇÕES IMPORTANTES

### Flask (app.py)
```python
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MB max
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['OUTPUT_FOLDER'] = 'output'
```

### Validações
- ZIP máximo 100MB
- Formatos aceitos: .zip
- Campos obrigatórios marcados
- Validação de UF

## 📱 RESPONSIVIDADE

Teste em:
- Desktop (1920x1080)
- Tablet (768x1024)
- Mobile (375x667)

## 🎯 RESULTADO FINAL ESPERADO

Um aplicativo web completo que:
1. ✅ Funciona sem erros
2. ✅ Interface bonita e responsiva
3. ✅ Processa ZIP corretamente
4. ✅ Gera Word formatado
5. ✅ Substitui todos os placeholders
6. ✅ Organiza imagens hierarquicamente
7. ✅ Permite download do relatório
8. ✅ Tem tratamento de erros robusto

## 🔥 DICAS IMPORTANTES PARA O AGENTE

1. **Sempre comente o código** - usuário não programa
2. **Teste cada funcionalidade** antes de avançar
3. **Use nomes descritivos** para variáveis e funções
4. **Documente todas as funções** com docstrings
5. **Crie logs detalhados** para debug
6. **Valide TODOS os inputs** do usuário
7. **Mantenha código limpo** e organizado

## 🎪 EXECUÇÃO NO REPLIT

1. Crie um novo Repl Python
2. Instale dependências: `pip install -r requirements.txt`
3. Execute: `python app.py`
4. Teste no navegador integrado
5. Faça upload de um ZIP de teste
6. Verifique se o Word é gerado corretamente

---

**IMPORTANTE**: Este projeto deve funcionar 100% no final. É um sistema real para uso profissional da empresa MAFFENG. Não aceite soluções parciais ou placeholders de código!