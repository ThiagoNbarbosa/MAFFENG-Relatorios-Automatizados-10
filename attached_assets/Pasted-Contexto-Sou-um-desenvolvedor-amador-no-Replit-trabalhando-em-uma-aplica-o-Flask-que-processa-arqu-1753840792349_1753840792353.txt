Contexto: Sou um desenvolvedor amador no Replit trabalhando em uma aplicação Flask que processa arquivos ZIP com fotos organizadas em pastas e gera relatórios Word. Estou enfrentando dois problemas críticos:

1. NEM TODAS AS FOTOS ESTÃO SENDO INSERIDAS NO RELATÓRIO FINAL
2. AS IMAGENS APARECEM EM PRETO/QUEBRADAS NO PREVIEW

ANÁLISE DETALHADA DOS PROBLEMAS:
===============================

PROBLEMA 1 - Discrepância no Número de Imagens:
- O log mostra "Images found in form: 86"
- Mas apenas "Total images to process: 2"
- Isso indica que 84 imagens estão sendo perdidas no processo

PROBLEMA 2 - Erros 404 nas Thumbnails:
- Múltiplos erros "ERROR:app:Error serving thumbnail: 404 Not Found"
- Isso sugere que os caminhos das imagens estão incorretos ou os arquivos não existem

INVESTIGAÇÃO NECESSÁRIA:
========================

1. FLUXO DE PROCESSAMENTO DE IMAGENS:
 - Verificar função processar_zip() em word_utils.py - isso ndeveria ser C# ? - 
   - Analisar como as imagens são copiadas para /tmp/
   - Confirmar se os caminhos temporários estão sendo mantidos corretamente

2. SERIALIZAÇÃO E DESERIALIZAÇÃO:
   - Verificar se o pickle está preservando todos os dados
   - Analisar se há problemas na sessão Flask
   - Confirmar se temp_content_file está sendo salvo/carregado corretamente

3. ROTA DE THUMBNAILS:
   - Verificar se serve_thumbnail() está validando caminhos corretamente
   - Confirmar se os arquivos temporários existem quando solicitados
   - Analisar se há problemas de timing (arquivos sendo removidos muito cedo)

4. GERAÇÃO DO RELATÓRIO:
   - Verificar se customized_content está sendo construído corretamente
   - Analisar se final_content mantém todas as imagens
   - Confirmar se inserir_conteudo_word() está processando tudo

AÇÕES ESPECÍFICAS PARA DIAGNÓSTICO:
==================================

1. ADICIONAR LOGS DETALHADOS:
   - Contar imagens em cada etapa do processo
   - Logar caminhos de arquivos em cada função
   - Adicionar timestamps para rastrear quando arquivos são criados/removidos

2. VERIFICAR ARQUIVOS TEMPORÁRIOS:
   - Confirmar se imagens estão sendo copiadas corretamente para /tmp/
   - Verificar permissões dos arquivos temporários
   - Analisar se há conflitos de nomes de arquivos

3. VALIDAR ESTRUTURA DE DADOS:
   - Imprimir conteudo_estruturado completo
   - Verificar se pickle preserva todos os dados
   - Confirmar estrutura do form data no POST

4. TESTAR ROTA DE THUMBNAILS:
   - Verificar se caminhos estão sendo construídos corretamente
   - Confirmar se arquivos existem quando serve_thumbnail é chamado
   - Testar com URLs completas no browser

CÓDIGO A SER ANALISADO:
======================

Principais arquivos e funções: Estes arquivos não deveriam estar em C# ou eles podem permanecer aqui ? eu quero mudar para C# pois a manipulação do word nativo é muito melhor. 
- word_utils.py: processar_zip(), inserir_conteudo_word()
- app.py: processar_upload(), preview(), generate_report(), serve_thumbnail()
- Estrutura de dados: conteudo_estruturado, session storage, pickle

RESULTADO ESPERADO:
==================

Após esta análise, devo ser capaz de:
1. Identificar exatamente onde as 84 imagens estão sendo perdidas
2. Corrigir o problema dos thumbnails em preto/404
3. Garantir que todas as imagens sejam processadas corretamente
4. Melhorar o sistema de logs para futuros diagnósticos

Por favor, execute uma análise completa seguindo estes pontos e proponha correções específicas para cada problema identificado. Seja extremamente detalhado nas explicações e forneça código completo para as correções necessárias.
Este prompt está estruturado para guiar uma investigação sistemática dos problemas que você está enfrentando. Ele identifica os sintomas específicos dos logs e propõe uma abordagem metódica para encontrar e corrigir as causas raiz.