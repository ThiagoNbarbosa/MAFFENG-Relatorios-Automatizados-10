@model MAFFENG.Models.PreviewModel
@{
    ViewBag.Title = "Preview do Relatório";
}

<div class="space-y-8">
    <!-- Header -->
    <div class="glass-card rounded-2xl p-8">
        <div class="flex items-center justify-between">
            <div>
                <h2 class="text-3xl font-bold mb-2">Preview do Relatório</h2>
                <p class="text-gray-300">Verifique a ordem e os títulos antes de gerar o documento final</p>
                <p class="text-sm text-blue-300 mt-2">
                    <i class="fas fa-info-circle mr-1"></i>
                    Projeto: @Model.FormData.NomeProjeto
                </p>
            </div>
            <div class="text-right">
                <button onclick="generateReport()" class="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg transition-colors font-medium">
                    <i class="fas fa-file-word mr-2"></i>
                    Confirmar e Gerar Relatório
                </button>
            </div>
        </div>
    </div>

    <!-- Preview Content -->
    <div class="glass-card rounded-2xl p-8">
        <div class="mb-6">
            <h3 class="text-xl font-semibold mb-4">Estrutura do Relatório</h3>
            <p class="text-gray-300 text-sm mb-4">
                <i class="fas fa-hand-point-up mr-1"></i>
                Arraste os itens para reordenar, clique nos títulos para editar, ou use o botão de lixeira para remover
            </p>
        </div>

        <form id="previewForm" method="POST" asp-action="GenerateReport">
            <div id="sortable-list" class="space-y-4">
                @{
                    int itemIndex = 0;
                }
                @foreach (var item in Model.PreviewItems)
                {
                    <!-- Folder Section -->
                    <div class="preview-item bg-white/5 border border-white/20 rounded-lg p-4" data-type="folder" data-index="@itemIndex">
                        <input type="hidden" name="item_type_@itemIndex" value="folder">
                        <input type="hidden" name="item_original_@itemIndex" value="@item.OriginalTitle">
                        <input type="hidden" name="item_level_@itemIndex" value="@item.Level">
                        
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3 flex-1">
                                <div class="drag-handle cursor-move text-gray-400 hover:text-white">
                                    <i class="fas fa-grip-vertical"></i>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <i class="fas fa-folder text-yellow-400"></i>
                                    <span class="level-indicator">
                                        @for (int i = 0; i < item.Level; i++)
                                        {
                                            <i class="fas fa-chevron-right text-xs text-gray-400"></i>
                                        }
                                    </span>
                                </div>
                                <input type="text" 
                                       name="item_title_@itemIndex" 
                                       value="@item.Title" 
                                       class="bg-transparent border border-white/30 rounded px-3 py-1 text-white flex-1 min-w-0 focus:outline-none focus:border-blue-400"
                                       placeholder="Título da seção">
                            </div>
                            <div class="flex items-center space-x-2">
                                <span class="text-sm text-gray-400">
                                    @item.Images.Count
                                    @if (item.Images.Count == 1) { <text>imagem</text> } else { <text>imagens</text> }
                                </span>
                                <button type="button" onclick="removeItem(this)" class="text-red-400 hover:text-red-300 p-1">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        
                        <!-- Images in this folder -->
                        @if (item.Images.Any())
                        {
                            <div class="mt-4 ml-8">
                                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2">
                                    @foreach (var image in item.Images)
                                    {
                                        itemIndex++;
                                        <div class="preview-item bg-white/5 border border-white/10 rounded p-2 text-sm" data-type="image" data-index="@itemIndex">
                                            <input type="hidden" name="item_type_@itemIndex" value="image">
                                            <input type="hidden" name="item_path_@itemIndex" value="@image.Path">
                                            
                                            <div class="flex items-center justify-between">
                                                <div class="flex items-center space-x-2 flex-1 min-w-0">
                                                    <i class="fas fa-image text-blue-400 text-xs"></i>
                                                    <span class="text-gray-300 truncate">@image.Name</span>
                                                </div>
                                                <button type="button" onclick="removeItem(this)" class="text-red-400 hover:text-red-300 p-1 ml-2">
                                                    <i class="fas fa-trash text-xs"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    itemIndex++;
                }
            </div>
        </form>

        <!-- Action Buttons -->
        <div class="flex justify-between items-center mt-8 pt-6 border-t border-white/20">
            <a asp-action="Index" class="text-gray-400 hover:text-white transition-colors">
                <i class="fas fa-arrow-left mr-2"></i>
                Voltar ao Formulário
            </a>
            
            <div class="space-x-4">
                <button onclick="resetOrder()" class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg transition-colors">
                    <i class="fas fa-undo mr-2"></i>
                    Restaurar Ordem Original
                </button>
                <button onclick="generateReport()" class="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg transition-colors font-medium">
                    <i class="fas fa-file-word mr-2"></i>
                    Confirmar e Gerar Relatório
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Make list sortable
let sortableList = document.getElementById('sortable-list');
let draggedElement = null;

// Add drag and drop functionality
sortableList.addEventListener('dragstart', function(e) {
    if (e.target.closest('.preview-item[data-type="folder"]')) {
        draggedElement = e.target.closest('.preview-item[data-type="folder"]');
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', draggedElement.outerHTML);
        draggedElement.style.opacity = '0.5';
    }
});

sortableList.addEventListener('dragend', function(e) {
    if (draggedElement) {
        draggedElement.style.opacity = '';
        draggedElement = null;
    }
});

sortableList.addEventListener('dragover', function(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
});

sortableList.addEventListener('drop', function(e) {
    e.preventDefault();
    if (draggedElement) {
        let target = e.target.closest('.preview-item[data-type="folder"]');
        if (target && target !== draggedElement) {
            let rect = target.getBoundingClientRect();
            let insertBefore = e.clientY < rect.top + rect.height / 2;
            
            if (insertBefore) {
                target.parentNode.insertBefore(draggedElement, target);
            } else {
                target.parentNode.insertBefore(draggedElement, target.nextSibling);
            }
            
            updateItemIndices();
        }
    }
});

// Enable dragging for folder items
document.querySelectorAll('.preview-item[data-type="folder"]').forEach(item => {
    item.draggable = true;
});

// Enable dragging on drag handles
document.querySelectorAll('.drag-handle').forEach(handle => {
    handle.addEventListener('mousedown', function(e) {
        let item = this.closest('.preview-item[data-type="folder"]');
        if (item) {
            item.draggable = true;
        }
    });
});

function removeItem(button) {
    if (confirm('Tem certeza que deseja remover este item?')) {
        let item = button.closest('.preview-item');
        item.remove();
        updateItemIndices();
    }
}

function updateItemIndices() {
    let items = document.querySelectorAll('.preview-item');
    let folderIndex = 0;
    let imageIndex = 1000; // Start images from a high number to avoid conflicts
    
    items.forEach((item, index) => {
        let type = item.dataset.type;
        let oldIndex = item.dataset.index;
        let newIndex;
        
        if (type === 'folder') {
            newIndex = folderIndex;
            folderIndex += 1;
        } else {
            newIndex = imageIndex;
            imageIndex += 1;
        }
        
        // Update all input names in this item
        item.querySelectorAll('input').forEach(input => {
            if (input.name) {
                input.name = input.name.replace(oldIndex, newIndex);
            }
        });
        
        item.dataset.index = newIndex;
    });
}

function resetOrder() {
    if (confirm('Tem certeza que deseja restaurar a ordem original?')) {
        location.reload();
    }
}

function generateReport() {
    // Update indices one final time before submission
    updateItemIndices();
    
    // Show loading state
    let button = event.target;
    let originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Gerando Relatório...';
    button.disabled = true;
    
    // Submit form
    document.getElementById('previewForm').submit();
}

// Initialize
updateItemIndices();
</script>

<style>
.preview-item {
    transition: all 0.3s ease;
}

.preview-item:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

.drag-handle:hover {
    cursor: grab;
}

.drag-handle:active {
    cursor: grabbing;
}

.preview-item.dragging {
    opacity: 0.5;
    transform: rotate(5deg);
}

.level-indicator {
    display: inline-flex;
    align-items: center;
    gap: 2px;
}

input[type="text"]:focus {
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
}
</style>